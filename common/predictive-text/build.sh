#!/bin/bash
#
# Compiles the Language Modeling Layer for common use in predictive text and autocorrective applications.
# Designed for optimal compatibility with the Keyman Suite.
#

EMBEDDED_WORKER=embedded_worker.js

# Include some helper functions from resources
# shellcheck source=../../resources/shellHelperFunctions.sh
. "$(dirname "$0")/../../resources/shellHelperFunctions.sh"


# Build the worker and the main script.
build ( ) {
  # Build worker first; the main file depends on it.
  # Then wrap the worker; Then build the main file.
  build-worker && wrap-worker && build-main
}

# Builds the top-level JavaScript file (the second stage of compilation)
build-main () {
  npm run tsc -- -p ./tsconfig.json || fail "Could not build top-level JavaScript file."
}

# Builds the inner JavaScript worker (the first stage of compilation).
# This script must be wrapped.
build-worker () {
  npm run tsc -- -p ./worker/tsconfig.json || fail "Could not build worker."
}

# A nice, extensible method for -clean operations.  Add to this as necessary.
clean ( ) {
  rm -f "${EMBEDDED_WORKER}" index.js index.js.map
  if [ $? -ne 0 ]; then
    fail "Failed to erase the prior build."
  fi
}

display_usage ( ) {
  echo "Usage: $0 [-clean] [-test | -tdd]"
  echo "       $0 -help"
  echo
  echo "  -clean              to erase pre-existing build products before a re-build"
  echo "  -help               displays this screen and exits"
  echo "  -tdd                skips dependency updates, builds, then runs unit tests only"
  echo "  -test               runs unit and integration tests after building"
}

unit-test ( ) {
  npm run mocha -- --recursive ./unit_tests/headless/*.js
}

# Creates embedded_worker.js. Must be run after the worker is built for the
# first time
wrap-worker ( ) {
  echo "> wrap-worker-code LMLayerWorkerCode ./worker/index.js > ${EMBEDDED_WORKER}"
  wrap-worker-code LMLayerWorkerCode ./worker/index.js > "${EMBEDDED_WORKER}"
}

# Wraps JavaScript code in a way that can be embedded in a worker.
# To get the inner source code, include the file generated by this function,
# then use name.toString() where `name` is the name passed into this
# function.
wrap-worker-code ( ) {
  name="$1"
  js="$2"
  echo "// Autogenerated code. Do not modify!"
  printf "function %s () {\n" "${name}"
  cat "${js}"
  printf "\n}\n"
}

################################ Main script ################################

run_tests=0
fetch_deps=1
unit_tests_only=0

# Process command-line arguments
while [[ $# -gt 0 ]] ; do
  key="$1"
  case $key in
    -clean)
      clean
      ;;
    -help|-h)
      display_usage
      exit
      ;;
    -test)
      run_tests=1
      ;;
    -tdd)
      run_tests=1
      fetch_deps=0
      unit_tests_only=1
      ;;
    *)
      echo "$0: invalid option: $key"
      display_usage
      exit -1
  esac
  shift # past the processed argument
done

# Check if Node.JS/npm is installed.
type npm >/dev/null ||\
    fail "Build environment setup error detected!  Please ensure Node.js is installed!"

if (( fetch_deps )); then
  echo "Dependencies check"
  npm install --no-optional
fi

build || fail "Compilation failed."
echo "Typescript compilation successful."

if (( run_tests )); then
  if (( unit_tests_only )); then
    unit-test || fail "Unit tests failed"
  else
    npm test || fail "Tests failed"
  fi
fi
