#!/usr/bin/python3

import argparse
import logging
import os
from keyman_config import __version__

def main():
    parser = argparse.ArgumentParser(description='Show installed Keyman keyboards with name, version, id.')
    parser.add_argument('-l', "--long", help='long format also shows description', action="store_true")
    parser.add_argument('-s', "--shared", help='show those installed in shared areas', action="store_true")
    parser.add_argument('-o', "--os", help='show those installed by the OS', action="store_true")
    parser.add_argument('-u', "--user", help='show those installed in user areas', action="store_true")
    parser.add_argument('--version', action='version', version='%(prog)s version '+__version__)
    parser.add_argument('-v', action='store_true', help='verbose logging')
    parser.add_argument('-vv', action='store_true', help='very verbose logging')

    args = parser.parse_args()
    if args.v:
        logging.basicConfig(level=logging.INFO, format='%(levelname)s:%(message)s')
    elif args.vv:
        logging.basicConfig(level=logging.DEBUG, format='%(levelname)s:%(message)s')
    else:
        logging.basicConfig(format='%(levelname)s:%(message)s')

    all = not args.user and not args.shared and not args.os

    if args.user or all:
        from keyman_config.list_installed_kmp import get_installed_kmp_user
        installed_kmp = get_installed_kmp_user()
        print("--- Installed user keyboards ---")
        print_keyboards(installed_kmp, args.long)
    if args.shared or all:
        from keyman_config.list_installed_kmp import get_installed_kmp_shared
        installed_kmp = get_installed_kmp_shared()
        print("--- Installed shared keyboards ---")
        print_keyboards(installed_kmp, args.long)
    if args.os or all:
        from keyman_config.list_installed_kmp import get_installed_kmp_os
        installed_kmp = get_installed_kmp_os()
        print("--- Installed OS keyboards ---")
        print_keyboards(installed_kmp, args.long)


def print_keyboards(installed_kmp, verbose):
    for kmp in sorted(installed_kmp):
        print(installed_kmp[kmp]['name'] + ", version:", installed_kmp[kmp]['version'] + ", id:", kmp)
        if verbose:
            if installed_kmp[kmp]['version'] != installed_kmp[kmp]['kmpversion']:
                print("Version mismatch. Installed keyboard is %s. Website says it is %s." % (installed_kmp[kmp]['kmpversion'], installed_kmp[kmp]['version']))
            if installed_kmp[kmp]['name'] != installed_kmp[kmp]['kmpname']:
                print("Name mismatch. Installed keyboard is %s. Website says it is %s." % (installed_kmp[kmp]['name'], installed_kmp[kmp]['kmpname']))

            if installed_kmp[kmp]['description']:
                print(installed_kmp[kmp]['description'])
            else:
                print("No description")
            print(os.linesep)


if __name__ == "__main__":
    main()
