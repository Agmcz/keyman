#!/usr/bin/python3

import argparse
import logging
import sys
import os
from keyman_config import __version__

from bs4 import BeautifulSoup
import datetime
import requests
import requests_cache
import time
from keyman_config.get_kmp import keyman_cache_dir

def get_keyboard_dir_page(kb_url):
	logging.info("Getting keyboard list")
	logging.debug("At URL %s", kb_url)
	cache_dir = keyman_cache_dir()
	current_dir = os.getcwd()
	expire_after = datetime.timedelta(days=7)
	if not os.path.isdir(cache_dir):
		os.makedirs(cache_dir)
	os.chdir(cache_dir)
	requests_cache.install_cache(cache_name='keyman_cache', backend='sqlite', expire_after=expire_after)
	now = time.ctime(int(time.time()))
	try:
		response = requests.get(kb_url)
		logging.debug("Time: {0} / Used Cache: {1}".format(now, response.from_cache))
		os.chdir(current_dir)
		requests_cache.core.uninstall_cache()
		if response.status_code == 200:
			return response.text
		else:
			return None
	except:
		return None


def get_dir_list():
	url = "https://downloads.keyman.com/keyboards/"
	page = get_keyboard_dir_page(url)
	soup = BeautifulSoup(page, 'html.parser')
	return [url + node.get('href') for node in soup.find_all('a')]

def write_kmpdirlist(kmpdirfile):
	with open(os.path.join(kmpdirfile), 'wt') as kmpdirlist:
		for file in get_dir_list():
			#logging.debug(file)
			kb = os.path.basename(os.path.dirname(file))
			if kb != "keyboards":
				print(kb, file=kmpdirlist)

def list_keyboards():
	kmpdirfile = os.path.join(keyman_cache_dir(), 'kmpdirlist')
	if not os.path.exists(kmpdirfile):
		write_kmpdirlist(kmpdirfile)
	else:
		logging.debug("kmpdirlist already exists")
		if os.path.getsize(kmpdirfile) == 0:
			write_kmpdirlist(kmpdirfile)

def main():
	parser = argparse.ArgumentParser(description='Install a Keyman keyboard, either a local .kmp file or specify a keyboard id to download and install')
	parser.add_argument('-s', action='store_true', help='Install to shared area /usr/local')
	parser.add_argument('-f', metavar='<kmpfile>', help='Keyman kmp file')
	parser.add_argument('-k', metavar='<keyboardid>', help='Keyman keyboard id')
	parser.add_argument('--version', action='version', version='%(prog)s version '+__version__)
	parser.add_argument('-v', action='store_true', help='verbose logging')
	parser.add_argument('-vv', action='store_true', help='very verbose logging')

	args = parser.parse_args()
	if args.v:
		logging.basicConfig(level=logging.INFO, format='%(levelname)s:%(message)s')
	elif args.vv:
		logging.basicConfig(level=logging.DEBUG, format='%(levelname)s:%(message)s')
	else:
		logging.basicConfig(format='%(levelname)s:%(message)s')

	if args.k and args.f:
		logging.error("km-package-install: error: too many arguments: either install a local kmp file or specify a keyboard id to download and install.")
		sys.exit(2)

	os.remove(os.path.join(keyman_cache_dir(), 'kmpdirlist'))

	from keyman_config.install_kmp import install_kmp, InstallError, InstallStatus
	from keyman_config.list_installed_kmp import get_kmp_version
	from keyman_config.get_kmp import get_keyboard_data, get_kmp

	def try_install_kmp(inputfile, arg, online=False, sharedarea=False):
		try:
			install_kmp(inputfile, online, sharedarea)
		except InstallError as e:
			if e.status == InstallStatus.Abort:
				logging.error("km-package-install: error: Failed to install %s", arg)
				logging.error(e.message)
				sys.exit(3)
			else:
				logging.warning(e.message)

	if args.f:
		name, ext = os.path.splitext(args.f)
		if ext != ".kmp":
			logging.error("km-package-install: Input file %s is not a kmp file.", args.f)
			logging.error("km-package-install -f <kmpfile>")
			sys.exit(2)

		if not os.path.isfile(args.f):
			logging.error("km-package-install: Keyman kmp file %s not found.", args.f)
			logging.error("km-package-install -f <kmpfile>")
			sys.exit(2)
		try_install_kmp(args.f, "file " + args.f, False, args.s)
	elif args.k:
		installed_kmp_ver = get_kmp_version(args.k)
		kbdata = get_keyboard_data(args.k)
		if not kbdata:
			logging.error("km-package-install: error: Could not download keyboard data for %s", args.k)
			sys.exit(3)
		if installed_kmp_ver:
			if kbdata['version'] == installed_kmp_ver:
				logging.error("km-package-install: The %s version of the %s keyboard is already installed.", installed_kmp_ver, args.k)
				sys.exit(1)
			elif float(kbdata['version']) > float(installed_kmp_ver):
				logging.error("km-package-install: A newer version of %s keyboard is available. Uninstalling old version %s then downloading and installing new version %s.", args.k, installed_kmp_ver, kbdata['version'])
				uninstall_kmp(args.k, args.s)

		kmpfile = get_kmp(args.k)
		if kmpfile:
			try_install_kmp(kmpfile, "keyboard " + args.k, True, args.s)
		else:
			logging.error("km-package-install: error: Could not download keyboard package %s", args.k)
			sys.exit(2)
	else:
		logging.error("km-package-install: error: no arguments: either install a local kmp file or specify a keyboard id to download and install.")
		sys.exit(2)



if __name__ == "__main__":
	main()
