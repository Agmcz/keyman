#!/usr/bin/python3

import argparse
import os.path
import sys
from keyman_config.kvk2ldml import parse_kvk_file, print_kvk, convert_ldml, output_ldml


# import struct
# from lxml import etree



def main():
    parser = argparse.ArgumentParser(description='Read and parse kvk on-screen keyboard file.')
    parser.add_argument('-k', "--keys", help='print all keys', action="store_true")
    parser.add_argument('-p', "--print", help='print kvk details', action="store_true")
    parser.add_argument('kvkfile', help='kvk file')
    parser.add_argument('-o', metavar='LDMLFILE', help='output LDML file')

    args = parser.parse_args()

    name, ext = os.path.splitext(args.kvkfile)
    # Check if input file extension is kvk
    if ext != ".kvk":
        print("kvk2ldml.py: error, input file %s is not a kvk file." % (args.kvkfile))
        print("kvk2ldml.py [-h] [-k] [-p] [-o <ldml file>] <kvk file>")
        sys.exit(2)

    # Check if input kvk file exists
    if not os.path.isfile(args.kvkfile):
        print("kvk2ldml.py: error, input file %s does not exist." % (args.kvkfile))
        print("kvk2ldml.py [-h] [-k] [-p] [-o <ldml file>] <kvk file>")
        sys.exit(2)

    kvkData = parse_kvk_file(args.kvkfile)

    if args.print:
        print_kvk(kvkData, args.keys)

    if args.o:
        with open(args.o, 'wb') as ldmlfile:
            ldml = convert_ldml(kvkData)
            output_ldml(ldmlfile, ldml)

if __name__ == "__main__":
    main()
