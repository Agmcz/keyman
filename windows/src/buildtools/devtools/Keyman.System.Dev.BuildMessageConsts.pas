unit Keyman.System.Dev.BuildMessageConsts;

interface

uses
  System.Generics.Collections;

type
  TLocaleCompiler = class
  private
    type
      TLocaleString = class
        name, value: string;
      end;

      TLocaleStrings = class(TObjectList<TLocaleString>);

    class function CLocaleXml(const root: string): string; static;
    class function CMessageDefaults(const root: string): string; static;
    class function CMessageIdentifierConsts(const root: string): string; static;
    class procedure SaveToPas(FStrings: TLocaleStrings; FileName,
      DefaultsFileName: string); static;
  public
    class procedure CompileLocaleXML(const WindowsSrcRoot: string);
  end;

implementation

uses
  System.StrUtils,
  System.SysUtils,
  System.Variants,
  Xml.xmldom,
  Xml.xmlintf,
  Xml.xmldoc;

class function TLocaleCompiler.CLocaleXml(const root: string): string;
begin
  Result := root+'\desktop\locale\locale.xml';
end;

class function TLocaleCompiler.CMessageIdentifierConsts(const root: string): string;
begin
  Result := root+'\global\delphi\cust\MessageIdentifierConsts.pas';
end;

class function TLocaleCompiler.CMessageDefaults(const root: string): string;
begin
  Result := root+'\global\delphi\cust\MessageDefaults.pas';
end;

class procedure TLocaleCompiler.CompileLocaleXML(const WindowsSrcRoot: string);
var
  doc: IXMLDocument;
  root, node: IXMLNode;
  FStrings: TLocaleStrings;
  ls: TLocaleString;
begin
  // Load XML
  FStrings := TLocaleStrings.Create;
  try
    doc := LoadXMLDocument(CLocaleXml(WindowsSrcRoot));

    root := doc.ChildNodes.FindNode('resources');
    node := root.ChildNodes.First;
    while node <> nil do
    begin
      Assert(node.NodeName = 'string', 'node.NodeName should be string');

      if node.HasAttribute('name') and (VarToStr(node.Attributes['name']) <> '') then
      begin
        ls := TLocaleString.Create;
        ls.name := VarToStr(node.Attributes['name']);
        ls.value := VarToStr(node.NodeValue);
        FStrings.Add(ls);
      end;

      node := node.NextSibling;
    end;

    SaveToPas(FStrings, CMessageIdentifierConsts(WindowsSrcRoot), CMessageDefaults(WindowsSrcRoot));
  finally
    FStrings.Free;
  end;
end;

class procedure TLocaleCompiler.SaveToPas(FStrings: TLocaleStrings; FileName, DefaultsFileName: string);
var
  f: TextFile;
  i: Integer;
  stype, sconst: string;
  sdefaults: string;
begin
  AssignFile(f, FileName);
  Rewrite(f);
  writeln(f, '// Generated file - generated by devtools at '+FormatDateTime('dd/mm/yyyy hh:nn:ss', Now));
  writeln(f, 'unit '+ChangeFileExt(ExtractFileName(FileName), '')+';'#13#10'interface'#13#10);

  stype := 'type TMessageIdentifier = (SKNull, '#13#10;
  sconst := 'const MessageIdentifierNames: array[TMessageIdentifier] of string = (''SKNull'', '#13#10;
  sdefaults := 'const SMessageDefaults: array[TMessageIdentifier] of string = ('''', '#13#10;

  for i := 0 to FStrings.Count - 1 do
  begin
    stype := stype + '  '+FStrings[i].name;
    sconst := sconst + '  '''+FStrings[i].name+'''';
    sdefaults := sdefaults + '  '+ReplaceText(QuotedStr(Trim(FStrings[i].value)), #13#10, '''+#13#10+''');

    if i < FStrings.Count - 1 then
    begin
      stype := stype + ',';
      sconst := sconst + ',';
      sdefaults := sdefaults + ',';
    end;

    stype := stype + #13#10;
    sconst := sconst + #13#10;
    sdefaults := sdefaults + #13#10;
  end;

  stype := stype + ');';
  sconst := sconst + ');';
  sdefaults := sdefaults + ');';

  writeln(f, stype);
  writeln(f);
  writeln(f, 'function MsgIdFromString(const msgid: WideString): TMessageIdentifier;');
  writeln(f, 'function StringFromMsgId(const msgid: TMessageIdentifier): WideString;');
  writeln(f);
  writeln(f, 'implementation');
  writeln(f);
  writeln(f, sconst);
  writeln(f);
  writeln(f, 'function StringFromMsgId(const msgid: TMessageIdentifier): WideString;');
  writeln(f, 'begin');
  writeln(f, '  Result := MessageIdentifierNames[msgid];');
  writeln(f, 'end;');
  writeln(f);
  writeln(f, 'function MsgIdFromString(const msgid: WideString): TMessageIdentifier;');
  writeln(f, 'var i: TMessageIdentifier;');
  writeln(f, 'begin');
  writeln(f, '  for i := Low(TMessageIdentifier) to High(TMessageIdentifier) do');
  writeln(f, '    if MessageIdentifierNames[i] = msgid then begin Result := i; Exit; end;');
  writeln(f, '  Result := SKNull;');
  writeln(f, 'end;');
  writeln(f);
  writeln(f, 'end.');

  CloseFile(f);

  AssignFile(f, DefaultsFileName);
  Rewrite(f);
  writeln(f, '// Generated file - generated by MakeStockKCT at '+FormatDateTime('dd/mm/yyyy hh:nn:ss', Now));
  writeln(f, 'unit '+ChangeFileExt(ExtractFileName(DefaultsFileName), '')+';'#13#10'interface'#13#10);
  writeln(f, 'function MsgDefault(const msgid: WideString): WideString;');
  writeln(f);
  writeln(f, 'implementation');
  writeln(f);
  writeln(f, 'uses MessageIdentifierConsts;');
  writeln(f);
  writeln(f, sdefaults);
  writeln(f);
  writeln(f, 'function MsgDefault(const msgid: WideString): WideString;');
  writeln(f, 'begin');
  writeln(f, '  Result := SMessageDefaults[MsgIdFromString(msgid)];');  // I3310
  writeln(f, 'end;');
  writeln(f);
  writeln(f, 'end.');

  CloseFile(f);
end;


end.
